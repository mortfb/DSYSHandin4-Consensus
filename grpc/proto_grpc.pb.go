// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HomeworkFourServiceClient is the client API for HomeworkFourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeworkFourServiceClient interface {
	SendTokenToNextCLient(ctx context.Context, opts ...grpc.CallOption) (HomeworkFourService_SendTokenToNextCLientClient, error)
	//maybe add a function to request a token from the previous node
	ReciveTokenFromPrevClient(ctx context.Context, opts ...grpc.CallOption) (HomeworkFourService_ReciveTokenFromPrevClientClient, error)
}

type homeworkFourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeworkFourServiceClient(cc grpc.ClientConnInterface) HomeworkFourServiceClient {
	return &homeworkFourServiceClient{cc}
}

func (c *homeworkFourServiceClient) SendTokenToNextCLient(ctx context.Context, opts ...grpc.CallOption) (HomeworkFourService_SendTokenToNextCLientClient, error) {
	stream, err := c.cc.NewStream(ctx, &HomeworkFourService_ServiceDesc.Streams[0], "/HomeworkFourService/SendTokenToNextCLient", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeworkFourServiceSendTokenToNextCLientClient{stream}
	return x, nil
}

type HomeworkFourService_SendTokenToNextCLientClient interface {
	Send(*TokenSendRequest) error
	CloseAndRecv() (*TokenSendResponse, error)
	grpc.ClientStream
}

type homeworkFourServiceSendTokenToNextCLientClient struct {
	grpc.ClientStream
}

func (x *homeworkFourServiceSendTokenToNextCLientClient) Send(m *TokenSendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *homeworkFourServiceSendTokenToNextCLientClient) CloseAndRecv() (*TokenSendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TokenSendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *homeworkFourServiceClient) ReciveTokenFromPrevClient(ctx context.Context, opts ...grpc.CallOption) (HomeworkFourService_ReciveTokenFromPrevClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &HomeworkFourService_ServiceDesc.Streams[1], "/HomeworkFourService/ReciveTokenFromPrevClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeworkFourServiceReciveTokenFromPrevClientClient{stream}
	return x, nil
}

type HomeworkFourService_ReciveTokenFromPrevClientClient interface {
	Send(*TokenSendRequest) error
	CloseAndRecv() (*TokenSendResponse, error)
	grpc.ClientStream
}

type homeworkFourServiceReciveTokenFromPrevClientClient struct {
	grpc.ClientStream
}

func (x *homeworkFourServiceReciveTokenFromPrevClientClient) Send(m *TokenSendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *homeworkFourServiceReciveTokenFromPrevClientClient) CloseAndRecv() (*TokenSendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TokenSendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeworkFourServiceServer is the server API for HomeworkFourService service.
// All implementations must embed UnimplementedHomeworkFourServiceServer
// for forward compatibility
type HomeworkFourServiceServer interface {
	SendTokenToNextCLient(HomeworkFourService_SendTokenToNextCLientServer) error
	//maybe add a function to request a token from the previous node
	ReciveTokenFromPrevClient(HomeworkFourService_ReciveTokenFromPrevClientServer) error
	mustEmbedUnimplementedHomeworkFourServiceServer()
}

// UnimplementedHomeworkFourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeworkFourServiceServer struct {
}

func (UnimplementedHomeworkFourServiceServer) SendTokenToNextCLient(HomeworkFourService_SendTokenToNextCLientServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTokenToNextCLient not implemented")
}
func (UnimplementedHomeworkFourServiceServer) ReciveTokenFromPrevClient(HomeworkFourService_ReciveTokenFromPrevClientServer) error {
	return status.Errorf(codes.Unimplemented, "method ReciveTokenFromPrevClient not implemented")
}
func (UnimplementedHomeworkFourServiceServer) mustEmbedUnimplementedHomeworkFourServiceServer() {}

// UnsafeHomeworkFourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeworkFourServiceServer will
// result in compilation errors.
type UnsafeHomeworkFourServiceServer interface {
	mustEmbedUnimplementedHomeworkFourServiceServer()
}

func RegisterHomeworkFourServiceServer(s grpc.ServiceRegistrar, srv HomeworkFourServiceServer) {
	s.RegisterService(&HomeworkFourService_ServiceDesc, srv)
}

func _HomeworkFourService_SendTokenToNextCLient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HomeworkFourServiceServer).SendTokenToNextCLient(&homeworkFourServiceSendTokenToNextCLientServer{stream})
}

type HomeworkFourService_SendTokenToNextCLientServer interface {
	SendAndClose(*TokenSendResponse) error
	Recv() (*TokenSendRequest, error)
	grpc.ServerStream
}

type homeworkFourServiceSendTokenToNextCLientServer struct {
	grpc.ServerStream
}

func (x *homeworkFourServiceSendTokenToNextCLientServer) SendAndClose(m *TokenSendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *homeworkFourServiceSendTokenToNextCLientServer) Recv() (*TokenSendRequest, error) {
	m := new(TokenSendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HomeworkFourService_ReciveTokenFromPrevClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HomeworkFourServiceServer).ReciveTokenFromPrevClient(&homeworkFourServiceReciveTokenFromPrevClientServer{stream})
}

type HomeworkFourService_ReciveTokenFromPrevClientServer interface {
	SendAndClose(*TokenSendResponse) error
	Recv() (*TokenSendRequest, error)
	grpc.ServerStream
}

type homeworkFourServiceReciveTokenFromPrevClientServer struct {
	grpc.ServerStream
}

func (x *homeworkFourServiceReciveTokenFromPrevClientServer) SendAndClose(m *TokenSendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *homeworkFourServiceReciveTokenFromPrevClientServer) Recv() (*TokenSendRequest, error) {
	m := new(TokenSendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeworkFourService_ServiceDesc is the grpc.ServiceDesc for HomeworkFourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeworkFourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HomeworkFourService",
	HandlerType: (*HomeworkFourServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTokenToNextCLient",
			Handler:       _HomeworkFourService_SendTokenToNextCLient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReciveTokenFromPrevClient",
			Handler:       _HomeworkFourService_ReciveTokenFromPrevClient_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
